Based on technical limitations/capabilities of the terrain engine:
	
	New storyline premise:
A fog has descended on the Realm of Dominul (causing strange creatures to descend from it's ash-y depths) and it's up to our brave warriors to restore back the land which was one's theirs. What's even stranger, is that the land which they once knew has changed as a result of the mist. 

Layout Generators:
-------------
1) Quad/KD tree Division  (+ with input image support for early leafing)
2) BSP tree division  (+ with input image support for early leafing)
3) Voronoi (+ with input image support)
4) Room neighbor generator
5) Maze generator

For island/city regions:  1
For cities/villages: 1,2,3,4,5   

Suitability for settlements:  
1) Is it near water?
2) Is the overall ground area relatively flat to allow building stuff on it?

LOD terrain detail processing
1) Default heights from polygonal height info (or low-res heightmap)
2) Generic Noise function...
3) Unique feature generation like circles, fault regions, etc. at specific areas



Assumign each QuadTreePage starts at  1km by 1km 
at 256 pixels/tiles per 1km as a start, but expanding outwards, can grow as big as 2km, 4km, 8km, 16km, etc. depending on visibility distance......
Each page, if procedurally generated, takes around 16-20 seconds to fully process asyncronously (heights, quad-tree, textures, normals, etc.) . For online servers, they could be notified to perform a cron job as well to procedurally generate the terrain as well, saving out the necessary terrain assets and height assets as downloadables so that clients could download the data rather than procedurally generate them on the fly, which will hog CPU unnecessarily. Trusted clients could send the procedurally generated data for the server to save in some cases, but to avoid cheating and server/world grieving, this is disabled by default and server-side code must be used instead.)
Each page always assumed to use fixed 256 tiles across in resolution, but the pages span larger distances (exponentially) for further away pages, forming a bottom-up hierachical grid quad-tree. See: http://wonderfl.net/c/k9HO for demonstration.

The world is effectively infinite...ie. it has minimum/maximum integer of +/-2147483647 accordingly that is grid seeded per zone. The minimum size of a seeded zone is 32kmx32km. Thus, the entire world length can 137,438,953,408 kilometers in length. However, if island zone quad tree resolution starts at 128x128 pixels via global noise, than perhaps only up to 33,554,431 kilometers in length (or double of that using 1x1 pixel ). Whatever it is, the entire world size can be procedurally generated to be bigger than earth itself.


Forming Island zones:
--------------------------------
The world is divided into a grid of zones, each zone grid square which are seeded to contain a quad-tree of possible islands of varying sizes. Some zones might be completely empty, representing large bodies of ocean. A zone is a 1024x1024km square, a little bit less than the length of singapore island but slightly higher in land area of singapore island. so overall similar to the land area of singapore. Not all zones have islands, thus able to represent large bodies of ocean.
 
Sizes:
Assuming 1024x1024 pixels for island texture information.
2x2km - 4km^2 = 512x512   16x16
4x4km - 16km^2 =  1024x1024           32x32
8x8km - 64km^2  = 1024x1024 (x2) - 128 pixels per page     64x64
16x16km - 256km^2  = 1024x1024 (x4) - 64 pixels  per page    128x128
32x32km = 1024km^2 = 1024x1024 (x8) - 32 pixels per page     256x256
Bracketed reprsents pixel scale-up ratio...thus potential loss of resolution.   

Creating page height map:
* Precompute entire island grayscale byte heightmap texture, which is box-blurred to avoid harsh stepping and save into heightmap.
- Apply noise function at correct scale to sampled linearly interpolated heights.
- (Optional) Apply random unique land formations modifiers across the page heightmap (which can go up to 1km by 1km), such as finite fault regions, circles, volcanoes, pleateaus, etc.. These are seeded.

Creating page normal map:
- From final heightmap

Creating page biome splat textures: 
- Precompute entire island biome texture and scale up sample if necessary
- or - Precompute entire island biome texture, smooth scale up if necessary, and apply internal noise distribution per biome. (more detail/variety)


Creating vegetation:
- Based on biome, assign vergetation either using another noise function or a uniform grid random chance and deviation.


Forming Country regions: 
---------------------------
To do this infinitely would be hard strictly...without first forming continents from which are subdivided into countries. Thus, we treat "countries" as purely MUCH larger islands that can qualify as a somewhat a semi-continent and country (eg. Great Britian/India/Japan/New Zealand. etc.).Such a country's landmass can integrate into a much larger scheme of infinitely generated continents, where the lowest altitude at that region isn't necessarily the sea level but the lowest altitude somewhere in the continent, or the landmass is connected to a continent.

Thus, in order for real countries exist within continents, a much larger grid of continent regions must be first generated similar to how islands are formed (but at a larger scale), which is further subdivided down into a smaller grid of country regions for the the filled country areas and then a much smaller grid of island regions...where islands are only formed around/near the country where water is available and the sea-floor isn't too low.

The largest stipulated conutry size is along the entire length of Daggerfall (ie. 2 times the size of Great britain). Technically, one can go larger by 1 more level, but any more would mean no pixel could be used to represent a single page. Currently, 2 pixels is used to represent 1 km for the map!

Country Sizes:
64x64km = 4096km^2  - 16 pixels per page
128x128km = 16384km^2  - 8 pixels per page
256x256km = 65536km^2  - 4 pixels per page
1024x1024km = 1048576km^2  - 2 pixels per page

Creating page height map:
Heights are formed formed by raycasting into polygon soup (by default, the terrain generator uses polygon regions to represent a landmass). The polygons are placed in a quad-tree to support faster raycasting by sampling a potential visibility polygon set around only a small region of the map. This is the only way to accruate represent heights smoothly since the "square" pixel resolution might be too small to be linearly interpolated. Then again, I might be wrong and the earlier island method might still work....even across 2 pixels.

Creating page normal map:
From final heightmap

Creating page biome splat textures: 
Fuzzy quad cross edges + Blur + Internal Noise distribution per biome to form a 256x256 (or smaller) texture map.

Additionally, the world is divided into a grid of regions, which can contain countries of varyign sizes. (up to >2 times the land area of Great britain)  and down to 2 times the land area of Singapore.





_

PAYLOAD
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

FOR 128x128s
heightmap processed
normalmap processed
x1 or x2 rgb-splat/colormap based on biomes *
quadtree

(((
For 1024x1024 base  (client side can have potential security issues, server side may involve bandwidth issues)
- heightmap unprocessed grayscale
- blurred rgb image based on biomes
)))


* Splatting (ie. if splatting is used...)
- Default texture base ( could be tiling sand, or a fully stretched diffuse color base)
- Splatting of detail/textured materials.
Amount of R/G/B indicate the amount of splats accordingly for the 3 given tiling textures....With texture atlases and AGAL2 partial deririative, it's possible to go beyond 3 texture limit, but that would need multiple splat maps and complicate the process. Or perhaps, a splat map and a smaller UV variant map index download, but still needing AGAL2 deririttive and clamping.

0) Color base
1) Sand
2) Shrub
3) Rock

0) Sand
1) Shrub
2) Dirt
3) Rock


TODO: Test various Tribes tileset if it works well....Daggerfall texture set probably won't work at all but for Daggerfall itself would work.

-----------------------------------------------------------------------------

128x128 sampled procedural generation generated on client/server and may be cached on server. Basically, small samples of terrain (128x128 tiles) is progressively generated on the fly and un-fogged as the user explores the world. A 128 tileed area is about 250 meters long only. As the araes gets unfogged, users can view terrains that can potentially span kilometers.

But what goes on during 128x128 sampled procedural generation?

1) biome seeded item placement (based on current low-res/polygon-based biome sample) *
2) terrain height processing global seeded noise. (based on current low-res height sample or sampled slope polygon) *
3) per 3x3 sector process seeded circles (hmm...)
4) per 3x3 sector post process smooth (hmm...)
5) (possibly) terrain diffuse map based on biomes and slopes. *
6) normal map of finalised terrain heights *
7) quadtree of finalised terrain heights *

Problem with seaming neighbor generation: The nature of 3x3 neighboring terrain processing is that everything would then seem to have to be pre-generated beforehand to take into account neighbouring terrain samples. Otherwise, localized samples only work when it comes to applying seeded noise, but when applying smoothing and circle blasts that can spill across neighboring terrain samples, these has to be taken into consideration (for circles, 8x neighbor seed blasts that may affect current location and factored into result, and for smoothing, only if the terrain is alraedy processed along that adjacient edge, exist, smooth along edge, and this has to occur on BOTH heightmaps as part of a post processing process), thus, neighboring loads of terrain will smooth out edges on current adjcient terrains. Post-processing of terrain (such as smoothing processes) tend to require the entire terrain to be known beforehand for consistency, instead of procedurally generated on the fly, due to the factors mentioned above.  

If one adopts on-the-fly post-processing of terrain after procedural generation, one must store the unsmoothed heightmap copy per sample as well (so long as there are unloaded neighbors), in case a neighbor terrain sample gets generated, the post-processing operation must be applied again and than the terrain updated for not just 1 sample, but up to 9 samples due to the neighborign terrain samples taking into account smoothing across corners as well and not along edges. This is even harder to manage if the data is cached on the server.

Thus, post processing adds overhead. If one removes it, circle algorithms would look like crap either and noise might be too heavy if the setting for noise is too high. However, a good noise function (that isn't too rough) without circles or post-process smoothing, might be do-able, without any post-processing smoothing whatsoever.  However, it also means the terrain will lack a lot of variation that comes with the use of other algorithms.